# .github/workflows/release-github.yml
name: Release on GitHub

on:
  workflow_call:
    inputs:
      release_title:
        type: string
        required: true
      release_body:
        type: string
        required: true
    secrets:
      PAT_TOKEN:
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheels artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: Zip wheels into one archive
        run: |
          mkdir -p dist
          find dist -type f -name '*.whl' | zip -j dist/wheels.zip -@

      - name: Create GitHub Release
        id: create_release
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          echo "Creating release for tag '$TAG'â€¦"

          http_resp=$(curl --silent --output resp.json --write-out "%{http_code}" \
            --request POST \
            --url "https://api.github.com/repos/${{ github.repository }}/releases" \
            --header "Accept: application/vnd.github+json" \
            --header "Content-Type: application/json" \
            --header "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            --data @- <<EOF
          {
            "tag_name":   "$TAG",
            "name":       "${{ inputs.release_title }}",
            "body":       "${{ inputs.release_body }}",
            "prerelease": true
          }
          EOF
          )

          echo "HTTP status: $http_resp"
          cat resp.json

          if [[ "$http_resp" -ne 201 ]]; then
            echo "::error::Failed to create release (status $http_resp)"
            exit 1
          fi

          upload_url=$(jq -r .upload_url resp.json)
          upload_url=${upload_url%%\{*}
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT

      - name: Upload Release Asset
        if: steps.create_release.outputs.upload_url != ''
        run: |
          FILE=dist/wheels.zip
          echo "Uploading asset: $FILE"
          curl --silent --fail --data-binary @"$FILE" \
            --header "Content-Type: application/zip" \
            --header "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$FILE")"
